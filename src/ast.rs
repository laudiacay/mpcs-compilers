/*
 * ast.rs - data types and functions for creating an abstract syntax tree
 * using the output of the parser generated by pest from kaleidoscope.pest
 */

pub enum AstNode {
    Prog(Option<Vec<AstNode>>, Vec<AstNode>), // externs, funcs
    Extern(Type, String, Option<Vec<Type>>), // type, globid, tdecls
    Func(Type, String, Option<Vec<AstNode>>, AstNode), //type, globid, vdecls, blk

    // stmt
    Blk(Option<Vec<AstNode>>), // stmts
    ReturnStmt(Option<AstNode>), // exp
    VdeclStmt(Type, String, AstNode), // type, varid, exp
    ExpStmt(AstNode), // exp
    WhileStmt(AstNode, AstNode), // cond, stmt
    IfStmt(AstNode, AstNode, Option<AstNode>), // cond, stmt, else_stmt
    PrintStmt(AstNode), // exp
    PrintStmtSlit(String), // string

    // exp
    Assign(String, AstNode), // varid, exp
    Cast(Type, AstNode), //type, exp
    BinOp(BOp, AstNode, AstNode), // op, lhs, rhs
    UnaryOp(UOp, AstNode), // op, exp
    Literal(Lit), // lit
    VarVal(String), // var
    FuncCall(String, Option<Vec<AstNode>>), // ???? globid, exps
}

// terminals
pub enum Lit { // ðŸ”¥
    LitTrue,
    LitFalse,
    LitInt(i32),
    LitFloat(f64),
}

pub enum Type {
    IntType,
    CIntType,
    FloatType,
    BoolType,
    VoidType,
    Ref(bool, Box<Type>), // noalias, type
}

//binary operators
pub enum BOp {
    Equals, // =
    Mult,   // *
    Div,    // /
    Add,    // +
    Sub,    // -
    EqTo,   // ==
    Gt,     // >
    Lt,     // <
    And,    // &&
    Or,     // ||
}

pub enum UOp {
    BitwiseNeg, // !
    SignedNeg,  // -
}
