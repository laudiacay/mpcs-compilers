/*
 * ast.rs - data types and functions for creating an abstract syntax tree
 * using the output of the parser generated by pest from kaleidoscope.pest
 */

pub enum AstNode {
    Prog {
        externs: Option<Vec<Rc<AstNode>>>, 
        funcs: Vec<Rc<AstNode>>,
    },
    Extern {
        type: Box<Type>, 
        globid: String, 
        tdecls: Option<Vec<Type>>
    },
    Func {
        type_: Box<Type>, 
        globid: String, 
        vdecls: Option<Vec<Rc<AstNode>>>, 
        blk: Rc<AstNode>,
    },

    // stmt
    Blk {
        stmts: Option<Vec<Rc<AstNode>>>,
    }, 
    ReturnStmt {
        Option<Rc<AstNode>>,
    },
    VdeclStmt {
        type_: Box<Type>, 
        varid: String, 
        exp: Rc<AstNode>
    },
    ExpStmt {
        exp: Rc<AstNode>,
    },
    WhileStmt {
        cond: Rc<AstNode>, 
        stmt: Rc<AstNode>
    },
    IfStmt {
        cond: Rc<AstNode>, 
        stmt: Rc<AstNode>,
        else_stmt: Option<Rc<AstNode>>
    },
    PrintStmt {
        exp: Rc<AstNode>
    },
    PrintStmtSlit {
        string: String
    },

    // exp
    Assign {
        varid: String, 
        exp: Rc<AstNode>
    },
    Cast {
        type_: Box<Type>, 
        exp: Rc<AstNode>
    },
    BinOp {
        op: BOp,
        lhs: Rc<AstNode>, 
        rhs: Rc<AstNode>
    },
    UnaryOp {
        op: UOp,
        exp: Rc<AstNode>
    },
    Literal {
        lit: Lit
    },
    VarVal {
        var: String
    },
    FuncCall {
        globid: String, 
        exps: Option<Vec<Rc<AstNode>>>
    },
}

// terminals
pub enum Lit { // ðŸ”¥
    LitTrue,
    LitFalse,
    LitInt(i32),
    LitFloat(f64),
}

pub enum Type {
    IntType,
    CIntType,
    FloatType,
    BoolType,
    VoidType,
    Ref(bool, Box<Type>), // noalias, type
}

//binary operators
pub enum BOp {
    Equals, // =
    Mult,   // *
    Div,    // /
    Add,    // +
    Sub,    // -
    EqTo,   // ==
    Gt,     // >
    Lt,     // <
    And,    // &&
    Or,     // ||
}

pub enum UOp {
    BitwiseNeg, // !
    SignedNeg,  // -
}
