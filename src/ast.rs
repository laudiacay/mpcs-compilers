use serde::{Deserialize, Serialize};

use std::rc::Rc;

/*
 * ast.rs - data types and functions for creating an abstract syntax tree
 * using the output of the parser generated by pest from kaleidoscope.pest
 */
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum AstNode {
    Prog {
        externs: Vec<Rc<AstNode>>,
        funcs: Vec<Rc<AstNode>>,
    },
    Extern {
        type_: Box<Type>,
        globid: String,
        tdecls: Option<Vec<Box<Type>>>,
    },
    Func {
        type_: Box<Type>,
        globid: String,
        vdecls: Option<Vec<Rc<AstNode>>>,
        blk: Rc<AstNode>,
    },

    // stmt
    Blk {
        stmts: Option<Vec<Rc<AstNode>>>,
    },
    ReturnStmt {
        exp: Option<Rc<AstNode>>,
    },
    VDeclStmt {
        vdecl: Rc<AstNode>,
        exp: Rc<AstNode>,
    },
    ExpStmt {
        exp: Rc<AstNode>,
    },
    WhileStmt {
        cond: Rc<AstNode>,
        stmt: Rc<AstNode>,
    },
    IfStmt {
        cond: Rc<AstNode>,
        stmt: Rc<AstNode>,
        else_stmt: Option<Rc<AstNode>>,
    },
    PrintStmt {
        exp: Rc<AstNode>,
    },
    PrintStmtSlit {
        string: String,
    },

    // exp
    Assign {
        varid: String,
        exp: Rc<AstNode>,
    },
    Cast {
        type_: Box<Type>,
        exp: Rc<AstNode>,
    },
    BinOp {
        op: BOp,
        lhs: Rc<AstNode>,
        rhs: Rc<AstNode>,
    },
    UnaryOp {
        op: UOp,
        exp: Rc<AstNode>,
    },
    Literal {
        lit: Lit,
    },
    VarVal {
        var: String,
    },
    FuncCall {
        globid: String,
        exps: Option<Vec<Rc<AstNode>>>,
    },

    VDecl {
        type_: Box<Type>,
        varid: String,
    },
}

// terminals
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Lit {
    // ðŸ”¥
    LitTrue,
    LitFalse,
    LitInt(i32),
    LitFloat(f64),
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Type {
    IntType,
    CIntType,
    FloatType,
    BoolType,
    VoidType,
    Ref(bool, Box<Type>), // noalias, type
}

//binary operators
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum BOp {
    //    Equals, // = treated separately from other binops
    Mult, // *
    Div,  // /
    Add,  // +
    Sub,  // -
    EqTo, // ==
    Gt,   // >
    Lt,   // <
    And,  // &&
    Or,   // ||
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum UOp {
    BitwiseNeg, // !
    SignedNeg,  // -
}

#[cfg(test)]
mod tests {
    use std::fs::File;
    use std::io::BufReader;
    use crate::ast::AstNode;
    #[test]
    fn deserialization_example_1() {
        let file = File::open("test/test1.ast.yaml").unwrap();
        let reader = BufReader::new(file);
        let _u : AstNode = serde_yaml::from_reader(reader).unwrap();
    }
    #[test]
    fn deserialization_example_2() {
        let file = File::open("test/test2.ast.yaml").unwrap();
        let reader = BufReader::new(file);
        let _u : AstNode = serde_yaml::from_reader(reader).unwrap();
    }
}
