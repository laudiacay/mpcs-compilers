use serde::{Deserialize, Serialize};

#[derive(Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "prog")]
pub struct Prog {
    pub externs: Vec<Extern>,
    pub funcs: Vec<Func>,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Extern {
    pub type_: Type,
    pub globid: String,
    pub args: Option<Vec<Type>>,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Func {
    pub type_: Type,
    pub globid: String,
    pub args: Option<Vec<VDecl>>,
    pub blk: Block,
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Block {
    pub stmts: Option<Vec<Box<Stmt>>>,
}

/*
 * ast.rs - data types and functions for creating an abstract syntax tree
 * using the output of the parser generated by pest from kaleidoscope.pest
 */
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Stmt {
    Blk(Block),
    ReturnStmt(Option<Exp>),
    VDeclStmt {
        vdecl: VDecl,
        exp: Exp,
    },
    ExpStmt(Exp),
    WhileStmt {
        cond: Exp,
        stmt: Box<Stmt>,
    },
    IfStmt {
        cond: Exp,
        stmt: Box<Stmt>,
        else_stmt: Option<Box<Stmt>>,
    },
    PrintStmt(Exp),
    PrintStmtSlit(String),
}

#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Exp {
    Assign {
        varid: String,
        exp: Box<Exp>,
    },
    Cast {
        type_: Type,
        exp: Box<Exp>,
    },
    BinOp {
        op: BOp,
        lhs: Box<Exp>,
        rhs: Box<Exp>,
    },
    UnaryOp {
        op: UOp,
        exp: Box<Exp>,
    },
    Literal(Lit),
    VarVal(String),
    FuncCall {
        globid: String,
        exps: Option<Vec<Box<Exp>>>,
    },
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct VDecl {
    pub type_: Type,
    pub varid: String,
}
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum Lit {
    LitBool(bool),
    LitInt(i32),
    LitFloat(f64),
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub enum Type {
    IntType,
    CIntType,
    FloatType,
    BoolType,
    VoidType,
    Ref(bool, Box<Type>), // noalias, type
}

//binary operators
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub enum BOp {
    //    Equals, // = treated separately from other binops
    Mult, // *
    Div,  // /
    Add,  // +
    Sub,  // -
    EqTo, // ==
    Gt,   // >
    Lt,   // <
    And,  // &&
    Or,   // ||
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub enum UOp {
    BitwiseNeg, // !
    SignedNeg,  // -
}
