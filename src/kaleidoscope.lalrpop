use std::str::FromStr;
use std::rc::Rc;
use crate::ast::*;

grammar;

// macro for precedence climbing for binary operations
Tier<Op,NextTier>: Rc<Exp> = {
    <l:Tier<Op,NextTier>> <bop:Op> <r:NextTier> => Rc::new(Exp::BinOp{
        op: bop,
        lhs: l,
        rhs: r,
    }),
    NextTier
};

// comma-separated list macro
List<T>: Vec<T> = {
    <ds:(<T> ",")*> <d:T> => {
        let mut ds = ds;
        ds.push(d);
        ds
    }
}


// rule for the entire program
// used to generate the actual parser in main.rs
pub Prog: Prog = {
    <e:Extern*> <f:(Func+)> => Prog{
        externs: e, 
        funcs: f,
    }
};

Extern: Extern = {
    "extern" <t:Type> <gid:GlobId> "(" <tds:TDecls?> ")" ";" => Extern{
        type_: t,
        globid: gid,
        tdecls: tds,
    }
};

Func: Func = {
    "def" <t:Type> <gid:GlobId> "(" <vs:(VDecls)?> ")" <b:Blk> => Func{
        type_: t,
        globid: gid,
        vdecls: vs,
        blk: b,
    }
};

Blk: Block = {
    "{" <s:(Stmts)?> "}" => Block{ stmts: s },
};

Stmts: Vec<Rc<Stmt>> = {
    <s:(Stmt)+> => s,
};

Stmt = StmtRestr<"I">;

StmtRestr<I>: Rc<Stmt> = {
    <b:Blk> => Rc::new(Stmt::Blk(b)),
    "return" <e:(Exp)?> ";" => Rc::new(Stmt::ReturnStmt(e)),
    <v:VDecl> "=" <e:Exp> ";" => Rc::new(Stmt::VDeclStmt{
        vdecl: v,
        exp: e,
    }),
    <e:Exp> ";" => Rc::new(Stmt::ExpStmt(e)),
    "while" "(" <c:Exp> ")" <s:StmtRestr<I>> => Rc::new(Stmt::WhileStmt{
        cond: c,
        stmt: s,
    }),
    "print" <e:Exp> ";" => Rc::new(Stmt::PrintStmt(e)),
    "print" <s:Slit> ";" => Rc::new(Stmt::PrintStmtSlit(s)),
    IfStmt<I>,
};

IfStmt<I>: Rc<Stmt> = {
    "if" "(" <c:Exp> ")" <s:StmtRestr<"I">> if I != "" => Rc::new(Stmt::IfStmt{
        cond: c,
        stmt: s,
        else_stmt: None,
    }),
    "if" "(" <c:Exp> ")" <s:StmtRestr<"">> <e:("else" <StmtRestr<I>>)> => Rc::new(Stmt::IfStmt{
        cond: c,
        stmt: s,
        else_stmt: Some(e),
    }),
};

Exps = List<Exp>;

// lowest-precedence expressions
// see Term for highest prec., -Op rules for other precedences
Exp: Rc<Exp> = {
    Assignment,
    BinOp,
};

Assignment: Rc<Exp> = {
    <v:VarId> "=" <e:Exp> => Rc::new(Exp::Assign{
        varid: v,
        exp: e,
    }),
};

// all binary operations excluding casts and assignments
BinOp: Rc<Exp> = {
    // logic operations are lower-precedence than arithmetic, so check those first
    LogicOps
};

LogicOpsOp: BOp = {
    "||" => BOp::Or    
};
LogicOps = Tier<LogicOpsOp, LogicAnd>;

AndOp: BOp = {
    "&&" => BOp::And
};
LogicAnd = Tier<AndOp, LogicEq>;

EqOp: BOp = {
    "==" => BOp::EqTo,
};
LogicEq = Tier<EqOp, LogicComp>;

CompOp: BOp = {
    "<" => BOp::Lt,
    ">" => BOp::Gt,
};
LogicComp = Tier<CompOp, ArithOps>; // we're ready to do arithmetic

ArithOpsOp: BOp = {  // how do you name things
    "+" => BOp::Add,
    "-" => BOp::Sub,
};
ArithOps = Tier<ArithOpsOp, ArithFactor>;

FactorOp: BOp = {
    "*" => BOp::Mult,
    "/" => BOp::Div
};

ArithFactor = Tier<FactorOp, TypeCast>;

// Expressions that need to be parsed first (including high-precedence ops, literals, etc.)
Term: Rc<Exp> = {
    "(" <Exp> ")",
    Literal,
    <v:VarId> => Rc::new(Exp::VarVal(v)),
    FuncCall,
};

// Needed to put these in the precedence chain somewhere, arbitrarily decided
TypeCast: Rc<Exp> = {
    "[" <t:Type> "]" <e:TypeCast> => Rc::new(Exp::Cast{
        type_: t,
        exp: e,
    }),
    UOp,
};

UOp: Rc<Exp> = {
    "!" <e:UOp> => Rc::new(Exp::UnaryOp{
        op: UOp::BitwiseNeg,
        exp: e,
    }),
    "-" <e:UOp> => Rc::new(Exp::UnaryOp{
        op: UOp::SignedNeg,
        exp: e,
    }),
    Term,
};

Literal: Rc<Exp> = {
    "true"  => Rc::new(Exp::Literal(Lit::LitBool(true))),
    "false" => Rc::new(Exp::Literal(Lit::LitBool(false))),
    <i:r"[0-9]+"> <f:r"\.[0-9]+"?> => match f {
        None => Rc::new(Exp::Literal(Lit::LitInt(i32::from_str(i).unwrap()))),
        Some(f) => Rc::new(Exp::Literal(Lit::LitFloat(format!("{}{}", i, f).parse().unwrap()))),
    }
};


FuncCall: Rc<Exp> = {
    <g:GlobId> "(" <e:Exps?> ")" => Rc::new(Exp::FuncCall{
        globid: g,
        exps: e,
    }),
};

Slit: String = {
    r#""[^"\n\r]*""# => String::from(<>),
};

Ident: String = {
    r"[a-zA-Z_]+[a-zA-Z0-9_]*" => String::from(<>),
};

VarId: String = {
    "$" <i:Ident> => i,
};

GlobId: String = {
    Ident
};

Type: Box<Type> = {
    "int"   => Box::new(Type::IntType),
    "cint"  => Box::new(Type::CIntType),
    "float" => Box::new(Type::FloatType),
    "bool"  => Box::new(Type::BoolType),
    "void"  => Box::new(Type::VoidType),
    <na:"noalias"?> "ref" <t:Type> => match na {
        None    => Box::new(Type::Ref(false, t)),
        Some(_) => Box::new(Type::Ref(true, t)),
    }
};

// TDecls = List<Type>;
TDecls: Vec<Box<Type>> = {
    <ds:(<Type> ",")*> <d:Type> => {
        let mut ds = ds;
        ds.push(d);
        ds
    }
}

VDecls = List<VDecl>;

VDecl: Rc<VDecl> = {
    <t:Type> <i:VarId> => Rc::new(VDecl{
        type_: t,
        varid: i,
    })
}

// uh I think this ignores comments
match {
    r"#[^\n\r]*[\n\r]*" => { },
} else {
    r"\s*" => { },
    _
}
