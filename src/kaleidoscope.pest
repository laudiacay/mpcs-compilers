WHITESPACE = _{ " " | "\t" | NEWLINE}
COMMENT = _{("#" ~ (!NEWLINE ~ ANY)*)}

type_ = { "int" | "cint" | "float" | "bool" | "void" | ("noalias"? ~ "ref" ~ type_) }

ident = @{(ASCII_ALPHA+) ~ ASCII_ALPHANUMERIC*}
varid = @{"$" ~ ident} 
globid = {ident}

vdecl = {type_ ~ varid}

vdecls = { vdecl | (vdecl ~ "," ~ vdecls)}
tdecls = { type_ | (type_ ~ "," ~ tdecls)}

extern_ = {"extern" ~ type_ ~ globid ~ "(" ~ tdecls? ~ ")" ~ ";"}

slit = ${"\"" ~ (!("\"" | "\n" | "\r") ~ ANY)* ~ "\""}

lit = ${ "true" | "false" | (ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)?)}

uop = {("!" ~ exp) | ("-" ~ exp)}


// terminals
// literal
// varid
// nonterminals
// exps at the bottom
// binop

/*
sum_exp = _{sum_exp_loud | prod_exp}
sum_exp_loud = {prod_exp ~ (("+" | "-") ~ prod_exp)+}
*/

exp = _{ assign_exp_loud | or_exp }
assign_exp_loud = { (or_exp ~ "=")+ ~ or_exp }
or_exp = _{ or_exp_loud | and_exp }
or_exp_loud = { and_exp ~ ("||" ~ and_exp)+ }
and_exp = _{ and_exp_loud | equality_exp }
and_exp_loud = { equality_exp ~ ("&&" ~ equality_exp)+ }
equality_exp = _{ equality_exp_loud | comp_exp }
equality_exp_loud = {comp_exp ~ ("==" ~ comp_exp)+}
comp_exp = _{comp_exp_loud | sum_exp}
comp_exp_loud = { sum_exp ~ (("<" | ">") ~ sum_exp)+ }

sum_exp = _{prod_exp ~ sum_exp_loud_prime}
sum_exp_loud = { prod_exp ~ (("+" | "-") ~ sum_exp_loud_prime) }
sum_exp_loud_prime = { (("+" | "-") ~ prod_exp) ~ sum_exp_loud_prime | "" } 


prod_exp = _{prod_exp_loud | unary_exp}
prod_exp_loud = { unary_exp ~ (("*" | "/") ~ unary_exp)+ }
unary_exp = _{unary_exp_loud | primary_exp}
unary_exp_loud = { ("-" ~ unary_exp) | ("!" ~ unary_exp) }


primary_exp = {("(" ~ exp ~ ")")
      | (varid ~ "=" ~ exp)
      | ("[" ~ type_ ~ "]" ~ exp)
      | uop
      | lit
      | varid
      | (globid ~ "(" ~ exps? ~ ")")}

/*
exp = {("(" ~ exp ~ ")")
      | infix_exp // (exp ~ infix ~ exp)
      | (varid ~ "=" ~ exp)
      | ("[" ~ type_ ~ "]" ~ exp)
      | uop
      | lit
      | varid
      | (globid ~ "(" ~ exps? ~ ")")}
*/

exps = { exp | (exp ~ "," ~ exps)}

stmt = { blk
       | ("return" ~ exp? ~ ";")
       | (vdecl ~ "=" ~ exp ~ ";")
       | (exp ~ ";")
       | ("while" ~ "(" ~ exp ~ ")" ~ stmt)
       | ("if" ~ "(" ~ exp ~ ")" ~ stmt ~ ("else" ~ stmt)?)
       | ("print" ~ exp ~ ";")
       | ("print" ~ slit ~ ";")}

stmts = {stmt+}
blk = { "{" ~ (stmts?) ~ "}" }
func = {"def" ~ type_ ~ globid ~ "(" ~ (vdecls?) ~ ")" ~ blk}

prog = {SOI ~ (extern_* ~ func+) ~ EOI }



